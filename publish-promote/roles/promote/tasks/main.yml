---
# tasks file for promote

- name: promote | capture all content views in json
  shell: hammer --output json lifecycle-environment list {{ORGID}}
  register: cvsINFO

- name: promote | capture all version info for {{ content_view }} lifecycles
  shell: hammer --output json content-view version list {{ORGID}}
         --content-view "{{ content_view }}"
  register: cvVERS

- name: set_fact | find lifecycle prior to {{ lifecycle_env }}
  set_fact:
    lcID:    "{{ item.ID }}"
    lcPRIOR: "{{ item.Prior }}"
  when: item.Name == lifecycle_env
  with_items: "{{ cvsINFO.stdout }}"

- name: set_fact | find content view version ID related to prior lifecycle [{{lcPRIOR}}]
  set_fact:
    cvPRIORID:  "{{ item.ID }}"
    cvPRIORVER: "{{ item.Version }}"
  when: lcPRIOR in item["Lifecycle Environments"]
  with_items: "{{ cvVERS.stdout }}"

- name: promoting {{ content_view }} version {{ cvPRIORVER }} to {{ lifecycle_env }}
  command: hammer --interactive 0 content-view version promote {{ORGID}}
           --id {{cvPRIORID}} --to-lifecycle-environment {{lifecycle_env}}
           --description "Promote {{ ansible_date_time.iso8601 }}" --async
  ignore_errors: yes

- name: promote | get the Satellite Task Id for the newest promote task
  shell: hammer --csv task list --search promote --order 'ENDED AT' |
         awk -F, '!/^ID/ && $6~/planning|running/ {print $1; exit;}'
  register: satTASK
  until: satTASK.stdout != ""
  retries: 5
  delay: 30

- name: promote | wait for the {{ content_view }} promote task to complete successfully
  shell: hammer --csv task list --search {{ satTASK.stdout }} |
         awk -F, '!/^ID/ && $7 !~ /success/ {print;}'
  register: result
  until: result.stdout == ""
  retries: 5
  delay: 300

# add section to skip setting version if version is passed
